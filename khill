#!/usr/bin/perl

use Getopt::Std;
use Parallel::ForkManager;
use Digest::MurmurHash3 qw( murmur128_x64 );
use strict;

my %opts = ();
getopts ('i:o:k:p:m:n:c:s:', \%opts);
my $indir  = $opts{'i'}; #directory of genomes; sequence line must be on one line
my $outdir = $opts{'o'}; #directory with output of run
my $kmer = $opts{'k'};   #kmer size
my $motion = $opts{'m'}; #defined kmer overlap; m=1 will move kmers along on nuc at time and so on
my $number = $opts{'n'}; #sampling rate
my $procs = $opts{'p'};  #forks
my $cannon = $opts{'c'}; #set to 1 if you want cannoical kmers (rev comp taken into account)
my $kmerlim = $opts{'s'}; #limit of kmers to analyze

`mkdir -p $outdir`;

###READ and INITALIZE###

# genomes
my @genomes;
my $cflag = {};
opendir (D, "$indir");
while (readdir (D)){
    if ($_ =~m/^\./){
	next;
    }
    elsif ($_ =~m/\.gz$/){
	$_ =~s/\.gz$//;
	$cflag->{$_} = 1;
	push (@genomes, $_)
    }
    else{
	push (@genomes, $_)
    }
}
closedir (D);

# sampling rate
my $maxhash = 2**64;
my $thresh  = $maxhash / $number;

my $pm = Parallel::ForkManager->new($procs);
foreach my $genome (@genomes){
    $pm->start and next;
    print STDERR "Counting $genome\n";
    
    my $id;
    my $seq;
    my $kc = 0;
    my $signal = 0;
    open (FASTA, "$indir/$genome");
    open (KH, ">$outdir/$genome.hashes");
    while (my $line =<FASTA>){
	chomp $line;
        if ($line =~m/^>(.*)/){
            $id = $1;
        }
        else{
            my $seqa = $line;
            $seq     = uc($seqa);

            my $cnter = 1;
            while (length $seq >= $kmer){
		my $cfrag;
		my $rcfrag;
                my $ffrag = substr $seq, 0, $kmer;

                # disallow any string with unknown bases
                if ($ffrag =~m/[BDEFHIJKLMNOPQRSUVWXYZ]/i){
                    substr $seq, 0, $motion, '';
                    $cnter += $motion;
                }
                else{
		    if ($cannon == 1){
			$rcfrag = revdnacomp ($ffrag);
			if ($ffrag < $rcfrag){
			    $cfrag = $ffrag;
			}
			else{
			    $cfrag = $rcfrag;
			}
		    }
		    else{
			$cfrag = $ffrag;
		    }
			
		    my $hash = murmur128_x64 ($cfrag, 460);
		    (print KH "$hash\n") if ($hash < $thresh);
		    $kc++;
		    
                    substr $seq, 0, $motion, '';
                    $cnter += $motion;
                }
		($signal++) if ($kc >= $kmerlim);
		last if ($signal > 0);
            }
        }
	last if ($signal > 0);
    }
    close (FASTA);
    close (KH);
    $pm->finish;
}
$pm->wait_all_children;

# collate hashes
my $kmers = {};
my $allkmers = 0;
my $kmersperg = {};
foreach my $g (@genomes){
    print STDERR "Collating hashes for $g\n";
    open (H, "$outdir/$g.hashes");
    while (my $h = <H>){
        chomp $h;
        $kmers->{$h}->{$g}++;
        $kmersperg->{$g}++;
        $allkmers++;
    }
    close (H);
}

open (MAST, ">$outdir/stats.out");
my $uniqkmers = keys %$kmers;
print MAST "uniqkmers=$uniqkmers\n";
print MAST "allkmers=$allkmers\n";

# KLdiv
my $pm = Parallel::ForkManager->new($procs);
foreach my $sg (@genomes){
    $pm->start and next;
    print STDERR "Calculating KL $sg\n";
    my $kl = kl ($sg, $kmers, $kmersperg, \@genomes, $allkmers); #4th arg is all genomes in sampled pan
    my $weight = ($kmersperg->{$sg} / $allkmers);
    my $be = $kl * $weight;
    open (BE, ">$outdir/$sg.betaent");
    print BE "$sg\t$be\t$kl\t$weight\n";
    close (BE);
    $pm->finish;
}
$pm->wait_all_children;

# effective number of genomes (hill number for beta diversity)
my $betaent = 0;
foreach my $sg (@genomes){
    open (CE, "$outdir/$sg.betaent");
    while (my $line = <CE>){
	chomp $line;
	my @line = split (/\t/, $line);
	$betaent += $line[1];
    }
    close (CE);
}
my $betadiv = exp ($betaent);
print MAST "betaEnt=$betaent\n";
print MAST "betaDiv=$betadiv\n";
close (MAST);

#####SUBS####
    
sub kl {
    my $g = shift;
    my $kmers = shift;
    my $kpg = shift;
    my $sg = shift;
    my $allk = shift;
    my @sg = @$sg;
    
    my $kl = 0;
    foreach my $uniqmer (keys %$kmers){
	
	# a particular kmer in a particular genome
	my $psi = $kmers->{$uniqmer}->{$g} / $kpg->{$g};

	# heuristic
	next if ($psi == 0);

	# a particular kmer in the sampled pan genome
	my $pts = 0;
	foreach my $subgs (@sg){
	    $pts += $kmers->{$uniqmer}->{$subgs};
	}
	my $pss = $pts / $allk;
	
	# kl divergence
	my $kli = $psi * (log($psi/$pss));
	$kl += $kli;
    }
    return ($kl);
}

sub log2 {
    my $n = shift;
    return log($n)/log(2);
}
   
sub log10 {
    my $n = shift;
    return log($n)/log(10);
}

sub revdnacomp {
    my $dna = shift;
    my $revcomp = reverse($dna);

    $revcomp =~ tr/ACGTacgt/TGCAtgca/;
    return $revcomp;
}
